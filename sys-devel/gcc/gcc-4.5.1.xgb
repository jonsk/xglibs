#!/bin/bash
#
# Xiange Linux build scripts

# Short one-line description of this package.
DESCRIPTION="everyone knows gcc.."

# Homepage, not used by Portage directly but handy for developer reference
HOMEPAGE="http://gcc.gnu.org/"
# Point to any required sources; these will be automatically downloaded by
# gpkg. 
# $N = package name, such as autoconf, x-org
# $V = package version, such as 2.6.10

SCRIPT_AUTHORS="Íõ½­Î°<jonsk.echo@gmail.com>"

#SRC_URI="http://foo.bar.com/$N-$V.tar.bz2"
SRC_URI="http://ftp.gnu.org/gnu/gcc/$N-$V$R/$N-$V$R.tar.bz2"


# Binary package URI.
BIN_URI=""


# Runtime Depend
RDEPEND=""

# Build time depend
DEPEND="${RDEPEND}"



#unpack
xgb_unpack()
{
	#unpard file from $XGPATH_SOURCE to current directory.
	echo "Unpacking ..."
#	tar xf $XGPATH_SOURCE/$N-$V$R.tar.bz2
}

#config
xgb_config()
{
	#fist, cd build directory
#	cd $N-$V$R
	cd /tmp/gcc-4.5.1

	#libiberty: user the one from binutils
	sed -i 's/install_to_$(INSTALL_DEST) //' libiberty/Makefile.in

	#mkdir build
	mkdir ../build
	cd ../build
	err_check "config gcc: create build dir failed."


	#second, add package specified config params to XGB_CONFIG
	XGB_CONFIG+=" --prefix=/usr --libexecdir=/usr/lib --enable-shared \
	 --enable-threads=posix --enable-__cxa_atexit --enable-c99 \
	--enable-long-long --enable-clocale=gnu  --enable-languages=c,c++  \
	--disable-multilib --disable-bootstrap --with-system-zlib --disable-libstdcxx-pch"

	#Third, call configure with $XGB_CONFIG

	CC="ccache gcc -Wl,-rpath-link,/lib -isystem /usr/include" \
	CXX="ccache g++ -Wl,-rpath-link,/lib -isystem /usr/include" \
	../$N-$V$R/configure  --prefix=/usr --libexecdir=/usr/lib --enable-shared \
	--enable-threads=posix --enable-__cxa_atexit --enable-c99 \
	--enable-long-long --enable-clocale=gnu  --enable-languages=c,c++  \
	--disable-multilib --disable-bootstrap --with-system-zlib --disable-libstdcxx-pch
}

#build
xgb_build()
{
	#run make in current directory
	make
	make check
	../gcc-4.5.1/contrib/test_summary
}

#install
xgb_install()
{
	#install everything to $XGPATH_DEST
	make DESTDIR=$XGPATH_DEST install
	err_check "Install gcc failed."

	#create links.
	ln -sv gcc "$XGPATH_DEST/usr/bin/cc"
	mkdir -p "$XGPATH_DEST/lib"
	ln -sv ../usr/bin/cpp "$XGPATH_DEST/lib"
}

#post install
xgb_postinst()
{
	#check
	echo 'main(){}' > dummy.c
	cc dummy.c -v -Wl,--verbose &> dummy.log
	err_check "[Error] gcc: compile failed."

	readelf -l a.out | grep ': /lib'
	err_check "[Error] gcc: not link to /lib."

	grep -o '/usr/lib.*/crt[1in].*succeeded' dummy.log
	err_check "[Error] gcc: start .o file check failed."
	grep -B4 '^ /usr/include' dummy.log
	err_check "[Error] gcc: include dir check failed."
	grep 'SEARCH.*/usr/lib' dummy.log |sed 's|; |\n|g'
	grep "/lib.*/libc.so.6 " dummy.log
	grep found dummy.log
	rm -v dummy.c a.out dummy.log
}


