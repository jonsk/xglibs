#!/bin/bash
#
# Xiange Linux build scripts

# Short one-line description of this package.
DESCRIPTION="Toolkit for SSL v2/v3 and TLS v1"

# Homepage, not used by Portage directly but handy for developer reference
HOMEPAGE="http://www.openssl.org/"

# Point to any required sources; these will be automatically downloaded by
# gpkg. 
# $N = package name, such as autoconf, x-org
# $V = package version, such as 2.6.10

SRC_URI="http://www.openssl.org/source/openssl-0.9.8k.tar.gz \
	http://svn.cross-lfs.org/svn/repos/patches/openssl/openssl-0.9.8k-mips_support-1.patch "


# Binary package URI.
BIN_URI=""


# Runtime Depend
RDEPEND=""

# Build time depend
DEPEND="${RDEPEND}"


#unpack
xgb_unpack()
{
	#unpard file from $XGPATH_SOURCE to current directory.
	echo "Unpacking to `pwd`"
	tar xf $XGPATH_SOURCE/$N-$V$R.tar.gz
}

#config
xgb_config()
{
	echo "config $N-$V$R..."

	#fist, cd build directory
	cd $N-$V$R

	#second, add package specified config params to XGB_CONFIG
	XGB_CONFIG+=" --openssldir=/etc/ssl \
	--prefix=/usr shared"


	#Third, call configure with $XGB_CONFIG
	./Configure $XGB_CONFIG
}

#build
xgb_build()
{
	echo "make $N-$V$R..."

	#run make in current directory
	make PERL=/usr/bin/perl LIBDIR=lib32
}

#check
xgb_check()
{
	echo "checking $N-$V$R.."
	make test
}

#install
xgb_install()
{
	echo "install to $XGPATH_DEST"

	#install everything to $XGPATH_DEST
	make INSTALL_PREFIX=$XGPATH_DEST MANDIR=/usr/share/man install
	err_check "Install $N-$V failed."

	#copy certs.
	cp -v -r certs /etc/ssl
	rm -rf $XGPATH_DEST//usr/share/man/*
	install -v -d -m755 $XGPATH_DEST/usr/share/doc/$N-$V
        cp -v -r doc/{HOWTO,README,*.{txt,html,gif}} \
		$XGPATH_DEST/usr/share/doc/$N-$V
	rm -rf $XGPATH_DEST/usr/share/doc/$N-$V
cat > mkcabundle.pl << "EOF"
#!/usr/bin/perl -w                                                                                                          
#                                                                                                                           
# Used to regenerate ca-bundle.crt from the Mozilla certdata.txt.                                                           
# Run as ./mkcabundle.pl > ca-bundle.crt                                                                                    
#                                                                                                                           

my $cvsroot = ':pserver:anonymous@cvs-mirror.mozilla.org:/cvsroot';
my $certdata = 'mozilla/security/nss/lib/ckfw/builtins/certdata.txt';

open(IN, "cvs -d $cvsroot co -p $certdata|")
    || die "could not check out certdata.txt";

my $incert = 0;

print<<EOH;
# This is a bundle of X.509 certificates of public Certificate
# Authorities.  It was generated from the Mozilla root CA list.
#
# Source: $certdata
#
EOH

while (<IN>) {
    if (/^CKA_VALUE MULTILINE_OCTAL/) {
        $incert = 1;
        open(OUT, "|openssl x509 -text -inform DER -fingerprint")
            || die "could not pipe to openssl x509";
    } elsif (/^END/ && $incert) {
        close(OUT);
        $incert = 0;
        print "\n\n";
    } elsif ($incert) {
        my @bs = split(/\\/);
        foreach my $b (@bs) {
            chomp $b;
            printf(OUT "%c", oct($b)) unless $b eq '';
        }
    } elsif (/^CVS_ID.*Revision: ([^ ]*).*/) {
        print "# Generated from certdata.txt RCS revision $1\n#\n";
    }
}
EOF
	./mkcabundle.pl > ca-bundle.crt &&
	install -Dv -m644 ca-bundle.crt /etc/ssl/certs
}

