#!/bin/bash
#
# Xiange Linux build scripts

# Short one-line description of this package.
DESCRIPTION="GNU C library designed to work well on embedded systems"

# Homepage, not used by Portage directly but handy for developer reference
HOMEPAGE="designed to work well on embedded systems"

# Point to any required sources; these will be automatically downloaded by
# gpkg. 
# $N = package name, such as autoconf, x-org
# $V = package version, such as 2.6.10

eglibcname="eglibc-2.12-20100918-r11306.tar.bz2"
eglibcpatch="eglibc-ports-2.12-20100918-r11306.tar.bz2"

SRC_URI="http://xiangelinux.googlecode.com/files/$eglibcname \
	http://xiangelinux.googlecode.com/files/$eglibcpatch \
	http://patches.cross-lfs.org/dev/eglibc-2.12-20100725-r11059-make382-1.patch"


# Binary package URI.
BIN_URI=""


# Runtime Depend
RDEPEND=""

# Build time depend
DEPEND="${RDEPEND}"



#unpack
xgb_unpack()
{
	#unpard file from $XGPATH_SOURCE to current directory.
	echo "Unpacking ..."
	tar xf $XGPATH_SOURCE/$(basename $eglibcname)
	err_check "uncompress $N-$V failed."

	#cd build directory.
	cd $N-$V$R
	err_check "enter $N-$V failed."

	patch -Np1 -i $XGPATH_SOURCE/eglibc-2.12-20100725-r11059-make382-1.patch
	err_check "patch $N-$V failed."

	#
	LINKER=$(readelf -l $(file /tools/lib/libc-* | cut -f1 -d:) | sed -n 's@.*interpret.*/tools\(.*\)]$@\1@p')

	sed -i "s|libs -o|libs -L/usr/lib -Wl,-dynamic-linker=${LINKER} -o|" \
		scripts/test-installation.pl
	err_check "patch $N-$V failed."
	unset LINKER

	#patch  ports.
	echo "Patch $N-$V..."
	tar xpf $XGPATH_SOURCE/$(basename $eglibcpatch)
	err_check "uncompress port of $N-$V failed."

	cp config.make.in{,.orig}
	sed '/ldd-rewrite-script/s:@:${objdir}/&:' \
		config.make.in.orig > config.make.in
	err_check "patch $N-$V failed."

	mkdir -v ../eglibc-build
	cd ../eglibc-build
	err_check "cd build dir of $N-$V failed."

	echo "slibdir=/lib" >> configparms
}

#config
xgb_config()
{
	#run configure
	XGB_CONFIG=" --prefix=/usr --disable-profile --enable-add-ons \
		--enable-kernel=2.6.0 --libexecdir=/usr/lib/eglibc \
		--libdir=/usr/lib"
	CC="gcc -Xassembler -mfix-loongson2f-nop" ../$N-$V/configure $XGB_CONFIG
	cd ../eglibc-build/
        err_check "enter $N-$V failed."

}

#build
xgb_build()
{
	#run make in current directory
	make
}

#check
xgb_check()
{
	echo "checking $N-$V$R.."
#	cp -v ../eglibc-2.12/iconvdata/gconv-modules iconvdata
	err_check "patch $N-$V failed."
#	make -k check
	err_check "enter $N-$V failed."

}

glibc_nsswitch_conf()
{
cat > $XGPATH_DEST/etc/nsswitch.conf << "EOF"
# Begin /etc/nsswitch.conf
passwd: files
group: files
shadow: files
hosts: files dns
networks: files
protocols: files
services: files
ethers: files
rpc: files
# End /etc/nsswitch.conf
EOF
}

glibc_ld_so_conf()
{
cat > $XGPATH_DEST/etc/ld.so.conf << "EOF"
# Begin /etc/ld.so.conf

/usr/local/lib
/opt/lib

# End /etc/ld.so.conf
EOF
}



#install
xgb_install()
{
	#install everything to $XGPATH_DEST
	echo "Install eglibc"
	touch  $XGPATH_DEST/etc/ld.so.conf
	make install_root=$XGPATH_DEST install
	
	echo "Install locales.."
cat > ../eglibc-2.12/localedata/SUPPORTED << "EOF"
# This file names the currently supported and somewhat tested locales.
# If you have any additions please file a glibc bug report.
SUPPORTED-LOCALES=\
en_GB.UTF-8/UTF-8 \
en_GB/ISO-8859-1 \
en_US.UTF-8/UTF-8 \
en_US/ISO-8859-1 \
ja_JP.EUC-JP/EUC-JP \
ja_JP.UTF-8/UTF-8 \
zh_CN.GB18030/GB18030 \
zh_CN.GBK/GBK \
zh_CN.UTF-8/UTF-8 \
zh_CN/GB2312 \
zh_HK.UTF-8/UTF-8 \
zh_HK/BIG5-HKSCS \
zh_SG.UTF-8/UTF-8 \
zh_SG.GBK/GBK \
zh_SG/GB2312 \
zh_TW.EUC-TW/EUC-TW \
zh_TW.UTF-8/UTF-8 \
zh_TW/BIG5 \
EOF
        mkdir -pv /usr/lib/locale
        make localedata/install-locales
        mkdir -pv $XGPATH_DEST/usr/lib/locale/
        mv /usr/lib/locale/locale-archive $XGPATH_DEST/usr/lib/locale/

	err_check "[Error] install $N-$V failed."

	#add nsswitch.conf / glibc.ld.so
        glibc_nsswitch_conf
        glibc_ld_so_conf

	#config timezone.
	cp -v --remove-destination $XGPATH_DEST/usr/share/zoneinfo/Asia/Shanghai \
		$XGPATH_DEST/etc/localtime
	err_check "glibc: config time zone failed."
}

#glib_adjust_toolchain()
#{
	echo ">>> Begin adjust tool chain..."
#	echo 'main(){}' > dummy.c
#	
#	gcc $CFLAGS dummy.c
#	err_check "adjust: compile sample code failed."
#
#	readelf -l a.out | grep ': /lib'
#	if [ "$?" != "0" ]; then
 #               echo ">>> change gcc specs.."
#		gcc -dumpspecs | \
#			perl -p -e 's@/tools/lib/ld@/lib/ld@g;' \
 #    			-e 's@\*startfile_prefix_spec:\n@$_/usr/lib/ @g;' > \
#     			$(dirname $(gcc --print-libgcc-file-name))/specs
#		err_check "adjust: change gcc specs failed."
#	fi
#
#	#check again.
#	echo "adjust: checking specs.."
#	echo 'main(){}' > dummy.c
#	gcc $CFLAGS dummy.c
#	err_check "adjust: compile sample code failed."
#
#	readelf -l a.out | grep ': /lib'
 #       err_check "[Error] gcc: not link to /lib."
#	echo ">>> tool chain adjust OK"
#}


#post install
#xgb_postinst()
#{
#	#install locale
#	echo "Install locales.."
#cat > ../eglibc-2.12/localedata/SUPPORTED << "EOF"
# This file names the currently supported and somewhat tested locales.
# If you have any additions please file a glibc bug report.
#SUPPORTED-LOCALES=\
#en_GB.UTF-8/UTF-8 \
#en_GB/ISO-8859-1 \
#en_US.UTF-8/UTF-8 \
#en_US/ISO-8859-1 \
#ja_JP.EUC-JP/EUC-JP \
#ja_JP.UTF-8/UTF-8 \
#zh_CN.GB18030/GB18030 \
#zh_CN.GBK/GBK \
#zh_CN.UTF-8/UTF-8 \
#zh_CN/GB2312 \
#zh_HK.UTF-8/UTF-8 \
#zh_HK/BIG5-HKSCS \
#zh_SG.UTF-8/UTF-8 \
#zh_SG.GBK/GBK \
#zh_SG/GB2312 \
#zh_TW.EUC-TW/EUC-TW \
#zh_TW.UTF-8/UTF-8 \
#zh_TW/BIG5 \
#EOF
#	mkdir -pv /usr/lib/locale
#	make localedata/install-locales
#	mkdir -pv $XGPATH_DEST/usr/lib/locale/
#	mv /usr/lib/locale/locale-archive $XGPATH_DEST/usr/lib/locale/

	#glib_adjust_toolchain
#}

